from __future__ import annotations
from typing import List
from django_q.tasks import async_task

def _promise_hook(task):
    if not task.success:
        raise "Previous task not succesfull"
    hookdata = task.kwargs["hookdata"]
    if len(hookdata) == 0:
        return
    next = hookdata[0]
    callsign = next["func_callsign"]
    args = next["args"]
    kwargs = next["kwargs"]
    tail = hookdata[1:]
    async_task(callsign, *args, hookdata=tail, 
               hook="archive_backend.jobs.job_promise._promise_hook", **kwargs)


class Promise:
    def __init__(self):
        self.func_callsign = None
        self.args = []
        self.kwargs = {}
        self._then = None

    def on_success(self, then: Promise) -> Promise:
        if self._then is None:
            self._then = then
        else:
            self._then = self._then.on_success(then)
        return self
    
    def flat_dict_represenation(self) -> List[dict]:
        this = {
            "func_callsign": self.func_callsign,
            "args": self.args,
            "kwargs": self.kwargs
        }
        if self._then is not None:
            return [this] + self._then.flat_dict_represenation()
        return [this]

    def fire(self) -> None:
        """Launches the job. Must be called"""
        hookdata = []
        if self._then is not None:
            hookdata = self._then.flat_dict_represenation()
        async_task(self.func_callsign, *self.args,
                   hookdata=hookdata, 
                   hook="archive_backend.jobs.job_promise._promise_hook",
                   **self.kwargs)